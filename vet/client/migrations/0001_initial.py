# Generated by Django 4.2.6 on 2023-11-28 14:28

import client.models
import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Case",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "title",
                    models.CharField(max_length=60, verbose_name="Zusammenfassung"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Beschreibung",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Clinic",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "external_id",
                    models.CharField(max_length=100, verbose_name="Klinik ID"),
                ),
                ("title", models.CharField(blank=True, max_length=100, null=True)),
                ("slogan", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "return_address",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "street_number",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("zip_code", models.CharField(blank=True, max_length=100, null=True)),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("iban", models.CharField(blank=True, max_length=100, null=True)),
                ("bic", models.CharField(blank=True, max_length=100, null=True)),
                ("phone", models.CharField(blank=True, max_length=100, null=True)),
                ("mail", models.CharField(blank=True, max_length=100, null=True)),
                ("url", models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ConsumablesType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "code",
                    models.PositiveBigIntegerField(unique=True, verbose_name="Nr"),
                ),
                (
                    "description",
                    models.CharField(max_length=255, verbose_name="Beschreibung"),
                ),
                (
                    "price_per_unit",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="Preis pro Einheit"
                    ),
                ),
                ("current", models.BooleanField(default=True, verbose_name="aktuel")),
            ],
            options={
                "ordering": ["code"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Intolerance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("ingredient", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "ordering": ["ingredient"],
            },
        ),
        migrations.CreateModel(
            name="MedicationType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "code",
                    models.PositiveBigIntegerField(unique=True, verbose_name="Nr"),
                ),
                (
                    "description",
                    models.CharField(max_length=255, verbose_name="Beschreibung"),
                ),
                (
                    "price_per_unit",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="Preis pro Einheit"
                    ),
                ),
                ("current", models.BooleanField(default=True, verbose_name="aktuel")),
            ],
            options={
                "ordering": ["code"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Owner",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("firstname", models.CharField(max_length=100, verbose_name="Vorname")),
                ("lastname", models.CharField(max_length=100, verbose_name="Nachname")),
                (
                    "postal_street_number",
                    models.CharField(
                        max_length=100, verbose_name="Wohnort Straße und Hausnummer"
                    ),
                ),
                (
                    "postal_zipcode",
                    models.CharField(max_length=5, verbose_name="Wohnort Postleitzahl"),
                ),
                (
                    "postal_city",
                    models.CharField(max_length=100, verbose_name="Wohnort Stadt"),
                ),
                (
                    "billing_street_number",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Rechnung Straße und Hausnummer",
                    ),
                ),
                (
                    "billing_zipcode",
                    models.CharField(
                        blank=True,
                        max_length=5,
                        null=True,
                        verbose_name="Rechnung Postleitzahl",
                    ),
                ),
                (
                    "billing_city",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Rechnung Stadt",
                    ),
                ),
                (
                    "mobile",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        max_length=128,
                        null=True,
                        region="DE",
                        unique=True,
                        verbose_name="Telefon",
                    ),
                ),
                (
                    "fixed",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        max_length=128,
                        null=True,
                        region=None,
                        verbose_name="Festnetz",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="eMail",
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Notiz"
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "dsgv_accepted",
                    models.BooleanField(default=False, verbose_name="DSGVO zugestimmt"),
                ),
                (
                    "confirmed",
                    models.BooleanField(default=False, verbose_name="confirmed"),
                ),
                (
                    "clinic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="clinic_owners",
                        to="client.clinic",
                    ),
                ),
            ],
            options={
                "ordering": ["lastname", "firstname"],
            },
        ),
        migrations.CreateModel(
            name="Pet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("call_name", models.CharField(max_length=100, verbose_name="Rufname")),
                (
                    "birth_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Geburtsname",
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Geburtsdatum"
                    ),
                ),
                (
                    "deceased_date",
                    models.DateField(blank=True, null=True, verbose_name="Todesdatum"),
                ),
                (
                    "sex",
                    models.CharField(
                        choices=[("&male;", "männlich"), ("&female;", "weiblich")],
                        default="&male;",
                        max_length=8,
                        verbose_name="Geschlecht",
                    ),
                ),
                (
                    "castrated",
                    models.BooleanField(default=False, verbose_name="kastriert"),
                ),
                (
                    "sterilized",
                    models.BooleanField(default=False, verbose_name="sterilisierd"),
                ),
                (
                    "chip_id",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="Chip"
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Notiz"
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "insurance",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Versicherung",
                    ),
                ),
                (
                    "intolerance",
                    models.ManyToManyField(
                        blank=True,
                        related_name="Unverträglichkeit",
                        to="client.intolerance",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pets",
                        to="client.owner",
                    ),
                ),
            ],
            options={
                "ordering": ["call_name", "birth_date"],
            },
        ),
        migrations.CreateModel(
            name="Species",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Spezies"
                    ),
                ),
                (
                    "translation_key",
                    models.CharField(max_length=100, verbose_name="species translated"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Beschreibung",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TreatmentType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "code",
                    models.PositiveBigIntegerField(unique=True, verbose_name="Nr"),
                ),
                (
                    "description",
                    models.CharField(max_length=255, verbose_name="Beschreibung"),
                ),
                (
                    "price_per_unit",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="Preis pro Einheit"
                    ),
                ),
                ("current", models.BooleanField(default=True, verbose_name="aktuel")),
            ],
            options={
                "ordering": ["code"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Visit",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Gewicht",
                    ),
                ),
                (
                    "size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Größe",
                    ),
                ),
                (
                    "temperature",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=3,
                        null=True,
                        verbose_name="Temperatur",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=63, verbose_name="Zusammenfassung"),
                ),
                (
                    "anamneses",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Anamnese"
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="visits",
                        to="client.case",
                    ),
                ),
            ],
            options={
                "ordering": ["timestamp"],
            },
        ),
        migrations.CreateModel(
            name="VisitDocument",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Kommentar"
                    ),
                ),
                (
                    "document",
                    models.FileField(upload_to=client.models.user_directory_path),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "visit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="visit_documents",
                        to="client.visit",
                    ),
                ),
            ],
            options={
                "ordering": ["created"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Treatment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tax",
                    models.DecimalField(
                        choices=[(7.0, "7%"), (19.0, "19%"), (0.0, "steuerfrei")],
                        decimal_places=2,
                        default=19.0,
                        max_digits=4,
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.5,
                        max_digits=6,
                        validators=[
                            django.core.validators.MaxValueValidator(4),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="Faktor",
                    ),
                ),
                (
                    "price_per_unit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Preis pro Einheit",
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Kommentar"
                    ),
                ),
                (
                    "overwrite_gross_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="überschriebener Brutto Preis",
                    ),
                ),
                (
                    "overwrite_net_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="überschriebener Netto Preis",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_%(app_label)s",
                        to="client.treatmenttype",
                    ),
                ),
            ],
            options={
                "ordering": ["type__code"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Template",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=48, unique=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.CharField(max_length=255, verbose_name="Beschreibung"),
                ),
                (
                    "clinic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="clinic_templates",
                        to="client.clinic",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Race",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="Rasse"),
                ),
                (
                    "translation_key",
                    models.CharField(max_length=100, verbose_name="race translated"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Beschreibung",
                    ),
                ),
                (
                    "species",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="client.species"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PetDocument",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Kommentar"
                    ),
                ),
                (
                    "document",
                    models.FileField(upload_to=client.models.user_directory_path),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "pet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pet_documents",
                        to="client.pet",
                    ),
                ),
            ],
            options={
                "ordering": ["created"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="pet",
            name="race",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="client.race",
            ),
        ),
        migrations.AddField(
            model_name="pet",
            name="species",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="client.species"
            ),
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("timestamp", models.DateField(default=datetime.date.today)),
                (
                    "invoice_number",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Rechnungsnummer",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, default=0.0, max_digits=6, verbose_name="Wert"
                    ),
                ),
                (
                    "payment_type",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Bar"), (2, "Kartenzahlung"), (3, "auf Rechnung")],
                        default=1,
                        verbose_name="Zahlart",
                    ),
                ),
                (
                    "visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT, to="client.visit"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Medication",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tax",
                    models.DecimalField(
                        choices=[(7.0, "7%"), (19.0, "19%"), (0.0, "steuerfrei")],
                        decimal_places=2,
                        default=19.0,
                        max_digits=4,
                    ),
                ),
                (
                    "price_per_unit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Preis pro Einheit",
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Kommentar"
                    ),
                ),
                (
                    "overwrite_gross_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="überschriebener Brutto Preis",
                    ),
                ),
                (
                    "overwrite_net_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="überschriebener Netto Preis",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.5,
                        max_digits=6,
                        validators=[
                            django.core.validators.MaxValueValidator(10000),
                            django.core.validators.MinValueValidator(0),
                        ],
                        verbose_name="Menge",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_%(app_label)s",
                        to="client.medicationtype",
                    ),
                ),
            ],
            options={
                "ordering": ["type__code"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "invoice_no",
                    models.CharField(
                        blank=True,
                        default=client.models.increment_invoice_number,
                        max_length=12,
                        null=True,
                        verbose_name="Rechnungsnummer",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="invoice",
                        to="client.visit",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Consumable",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tax",
                    models.DecimalField(
                        choices=[(7.0, "7%"), (19.0, "19%"), (0.0, "steuerfrei")],
                        decimal_places=2,
                        default=19.0,
                        max_digits=4,
                    ),
                ),
                (
                    "price_per_unit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Preis pro Einheit",
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Kommentar"
                    ),
                ),
                (
                    "overwrite_gross_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="überschriebener Brutto Preis",
                    ),
                ),
                (
                    "overwrite_net_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="überschriebener Netto Preis",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.5,
                        max_digits=6,
                        validators=[
                            django.core.validators.MaxValueValidator(10000),
                            django.core.validators.MinValueValidator(0),
                        ],
                        verbose_name="Menge",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_%(app_label)s",
                        to="client.consumablestype",
                    ),
                ),
            ],
            options={
                "ordering": ["type__code"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CaseDocument",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Kommentar"
                    ),
                ),
                (
                    "document",
                    models.FileField(upload_to=client.models.user_directory_path),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="case_documents",
                        to="client.case",
                    ),
                ),
            ],
            options={
                "ordering": ["created"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="case",
            name="pet",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="cases",
                to="client.pet",
            ),
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Doctor"), (2, "Assistant"), (3, "Basic")],
                        default=1,
                    ),
                ),
                (
                    "clinic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="users",
                        to="client.clinic",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="VisitTreatment",
            fields=[
                (
                    "treatment_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="client.treatment",
                    ),
                ),
                (
                    "visit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="visit_treatments",
                        to="client.visit",
                    ),
                ),
            ],
            options={
                "ordering": ["type__code"],
                "abstract": False,
            },
            bases=("client.treatment",),
        ),
        migrations.CreateModel(
            name="VisitMedication",
            fields=[
                (
                    "medication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="client.medication",
                    ),
                ),
                (
                    "visit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="visit_medications",
                        to="client.visit",
                    ),
                ),
            ],
            options={
                "ordering": ["type__code"],
                "abstract": False,
            },
            bases=("client.medication",),
        ),
        migrations.CreateModel(
            name="VisitConsumable",
            fields=[
                (
                    "consumable_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="client.consumable",
                    ),
                ),
                (
                    "visit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="visit_consumables",
                        to="client.visit",
                    ),
                ),
            ],
            options={
                "ordering": ["type__code"],
                "abstract": False,
            },
            bases=("client.consumable",),
        ),
        migrations.CreateModel(
            name="TemplateTreatment",
            fields=[
                (
                    "treatment_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="client.treatment",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="template_treatments",
                        to="client.template",
                    ),
                ),
            ],
            options={
                "ordering": ["type__code"],
                "abstract": False,
            },
            bases=("client.treatment",),
        ),
        migrations.CreateModel(
            name="TemplateMedication",
            fields=[
                (
                    "medication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="client.medication",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="template_medications",
                        to="client.template",
                    ),
                ),
            ],
            options={
                "ordering": ["type__code"],
                "abstract": False,
            },
            bases=("client.medication",),
        ),
        migrations.CreateModel(
            name="TemplateConsumable",
            fields=[
                (
                    "consumable_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="client.consumable",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="template_consumables",
                        to="client.template",
                    ),
                ),
            ],
            options={
                "ordering": ["type__code"],
                "abstract": False,
            },
            bases=("client.consumable",),
        ),
    ]
